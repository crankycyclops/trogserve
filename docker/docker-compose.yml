# To start, issue the following command:
# DOCKER_UID=xxx docker-compose up, where DOCKER_UID is the UID that owns the
# files bind-mounted into the php container.

version: '3.3'

services:

    # This delightful gem comes from here:
    # https://github.com/moby/moby/issues/2259#issuecomment-917702737
    # @yuriyyakym, thank you! You are my hero. And yes, that's right. The only way
    # I can truly mount a named volume in a non-root container automatically via
    # docker-compose is to start a temporary service whose sole reason for being is
    # to mount and then chown the volume to the same user as the container that's
    # going to use it. Fun times. The trogdord user in the trogdord container uses
    # UID 999, GID 999, so that's what I'm passing to chown.
    volume-permissions-manager:
        image: ubuntu:20.04
        command: sh -c "chown 999:999 /trogdord_dump_dir"
        volumes:
            - type: volume
              source: trogdord_dump_dir
              target: /trogdord_dump_dir
              volume:
                nocopy: true

    # Trogdord and the web socket server will use redis to send and receive
    # messages to each other
    redis:
        image: redis:latest

    # Database for the PHP application
    database:
        image: mariadb:latest
        environment:
            MARIADB_RANDOM_ROOT_PASSWORD: 'yes'
            MARIADB_DATABASE: trogserve
            MARIADB_USER: trogserve
            MARIADB_PASSWORD: trogserve
        volumes:
            - type: volume
              source: trogserve_mysql
              target: /var/lib/mysql
              volume:
                nocopy: true

    # Php-fpm + trogdord extension
    php:
        image: crankycyclops/php8.1-fpm-trogdord-ext-npm:0.90.0
        user: "${DOCKER_UID}"
        depends_on:
            - "database"
        volumes:
            - ..:/var/www/trogserve
            - ./env:/var/www/trogserve/.env

    # Trogdord
    trogdord:
        image: crankycyclops/trogdord:0.91.0
        environment:
            TROGDORD_LISTEN_IPS: '["0.0.0.0"]'
            TROGDORD_OUTPUT_DRIVER: 'redis'
            TROGDORD_REDIS_HOST: redis
            TROGDORD_REDIS_CONNECTION_TIMEOUT: '3000'
            TROGDORD_STATE_ENABLED: 'true'
            TROGDORD_STATE_FORMAT: 'json'
            TROGDORD_STATE_PATH: '/usr/var/trogdord/state'
            TROGDORD_STATE_MAX_DUMPS_PER_GAME: '3'
            TROGDORD_STATE_AUTORESTORE_ENABLED: 'true'
            TROGDORD_STATE_DUMP_SHUTDOWN_ENABLED: 'true'
            TROGDORD_STATE_CRASH_RECOVERY_ENABLED: 'true'
        depends_on:
            - "volume-permissions-manager"
        volumes:
            - ../games:/usr/share/trogdor
            - type: volume
              source: trogdord_dump_dir
              target: /usr/var/trogdord/state
              volume:
                nocopy: true

    # Web socket server (the glue between the PHP application and trogdord)
    sockserve:
        image: crankycyclops/trogserve-websocket:master
        depends_on:
            - "trogdord"
            - "redis"
        ports:
            - 9000:9000
        volumes:
            - type: bind
              source: ./sockserve/config.env
              target: /sockserve/config.env
              read_only: true

    # Web server for the frontned application
    nginx:
        image: nginx:stable
        depends_on:
            - "php"
        ports:
            - 8080:80
        volumes:
            - ../:/var/www/trogserve
            - ./nginx:/etc/nginx/conf.d

volumes:

    # Trogserve's database will persist here
    trogserve_mysql:

    # trogdord will dump games here so that they can be restored later, even if the
    # container that dumped the game is destroyed
    trogdord_dump_dir:
